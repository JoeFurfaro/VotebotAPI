openapi: 3.0.0
info:
  title: auth
  version: '1.0'
  contact:
    name: Joe Furfaro
    url: joefurfaro.ca
    email: joe@dipole.app
servers:
  - url: 'http://localhost:3000'
    description: api
paths:
  /hosts:
    get:
      summary: Your GET endpoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Host'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: get-host
      description: Get a list of all hosts
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
    parameters: []
    post:
      summary: ''
      operationId: post-hosts
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      description: Add a new host and assign them a server
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                host:
                  $ref: '#/components/schemas/Host'
                server_port:
                  type: integer
  '/hosts/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: get-hosts-id
      description: Get a host by its ID
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
    put:
      summary: ''
      operationId: put-hosts-id
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Update a host
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Host'
    delete:
      summary: ''
      operationId: delete-hosts-id
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Delete a host and their server
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
  /sessions:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
        '201':
          description: Created
          headers: {}
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: get-sessions
      description: 'Get a list of all servers that are running, along with their associated voting sessions'
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
    post:
      summary: ''
      operationId: post-sessions
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      description: Create a new voting session template
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
  '/sessions/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: get-sessions-id
      description: Get a session template by its ID
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
    put:
      summary: ''
      operationId: put-sessions-id
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Update a specific session
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
    delete:
      summary: ''
      operationId: delete-sessions-id
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Delete a voting session template
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
  /auth/host:
    post:
      summary: ''
      operationId: post-auth-host
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Authenticate a host
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
        description: ''
    parameters: []
  /auth/superuser:
    post:
      summary: ''
      operationId: post-auth-login-superuser
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Superuser'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '404':
          description: Not Found
      description: Authenticate a superuser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
    parameters: []
  /servers:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: get-servers
      description: Get a list of all servers and their statuses
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
  '/servers/{id}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: get-servers-id
      description: Get a server by its ID
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: ''
      operationId: put-servers-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Update a server
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
  /results:
    post:
      summary: ''
      operationId: post-results
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      description: Add a new voting session results object
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
  '/results/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: get-results-id
      description: Get a single voting session results object
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
    delete:
      summary: ''
      operationId: delete-results-id
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Delete a voting session results object
      requestBody: {}
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
  /voters:
    post:
      summary: ''
      operationId: post-voters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voter'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      description: Add a new voter to a host
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
  '/voters/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voter'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: get-voters-id
      description: Get a voter by their ID
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
    put:
      summary: ''
      operationId: put-voters-id
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voter'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Update a voter
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Voter'
    delete:
      summary: ''
      operationId: delete-voters-id
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Delete a voter
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
  /runserver:
    post:
      summary: ''
      operationId: post-runserver
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '503':
          description: Service Unavailable
      description: "Run a new voting session on a host's server"
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                server:
                  $ref: '#/components/schemas/Server'
                session:
                  $ref: '#/components/schemas/Session'
components:
  schemas:
    Host:
      title: Host
      type: object
      description: Models a single voting session host.
      properties:
        id:
          type: string
        name:
          type: string
        voters:
          type: array
          items:
            $ref: '#/components/schemas/Voter'
        max_voters:
          type: integer
        last_billed:
          type: string
        rate_per_voter:
          type: string
        username:
          type: string
        password:
          type: string
        secret:
          type: string
        contact_name:
          type: string
        contact_email:
          type: string
        contact_phone:
          type: string
        server:
          $ref: '#/components/schemas/Server'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Results'
    Voter:
      title: Voter
      type: object
      description: Models a single voter belonging to a single Host.
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone:
          type: string
        host:
          $ref: '#/components/schemas/Host'
        secret:
          type: string
    Session:
      title: Session
      type: object
      description: Models the skeleton for creating a voting session.
      properties:
        id:
          type: string
        host:
          type: string
        topics:
          type: string
        voters:
          type: array
          items:
            $ref: '#/components/schemas/Voter'
    Topic:
      title: Topic
      type: object
      description: Models a template for creating a single Topic.
      properties:
        id:
          type: string
        text:
          type: string
        options:
          type: array
          items:
            type: string
        votes:
          type: array
          items:
            $ref: '#/components/schemas/Vote'
    Vote:
      title: Vote
      type: object
      description: Models a single vote.
      properties:
        id:
          type: string
        voter:
          $ref: '#/components/schemas/Voter'
        value:
          type: string
        time_placed:
          type: string
    Server:
      title: Server
      type: object
      description: Models a single Voting server.
      properties:
        id:
          type: string
        path:
          type: string
        running:
          type: boolean
          default: 'false'
        owner:
          $ref: '#/components/schemas/Host'
        session:
          $ref: '#/components/schemas/Session'
        process_id:
          type: string
        port:
          type: integer
    Superuser:
      title: Superuser
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        username:
          type: string
        password:
          type: string
        secret:
          type: string
      description: Models a single superuser
    Results:
      title: Results
      type: object
      description: Models the results of a voting session.
      properties:
        session:
          $ref: '#/components/schemas/Session'
        start_time:
          type: string
        end_time:
          type: string
        topic_results:
          type: array
          items:
            $ref: '#/components/schemas/TopicResults'
        id:
          type: string
    TopicResults:
      title: TopicResults
      type: object
      properties:
        id:
          type: string
        topic:
          $ref: '#/components/schemas/Topic'
        votes:
          type: array
          items:
            $ref: '#/components/schemas/Vote'
