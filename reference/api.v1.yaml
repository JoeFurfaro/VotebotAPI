openapi: 3.0.0
info:
  title: auth
  version: '1.0'
  contact:
    name: Joe Furfaro
    url: joefurfaro.ca
    email: joe@dipole.app
servers:
  - url: 'http://localhost:3000'
    description: api
paths:
  /hosts:
    get:
      summary: Your GET endpoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Host'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      operationId: get-host
      description: Get a list of all hosts.
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
        - schema:
            type: number
          in: query
          name: limit
          required: true
    parameters: []
    post:
      summary: ''
      operationId: post-hosts
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      description: Add a new host.
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Host'
  '/hosts/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-hosts-id
      description: Get a host by its ID
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
    put:
      summary: ''
      operationId: put-hosts-id
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Update a host
      parameters:
        - schema:
            type: string
          in: query
          name: secret
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Host'
    delete:
      summary: ''
      operationId: delete-hosts-id
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Delete a host and their server.
      parameters:
        - schema:
            type: string
          in: query
          name: secret
components:
  schemas:
    Host:
      title: Host
      type: object
      description: Models a single voting session host.
      properties:
        id:
          type: string
        name:
          type: string
        voters:
          type: array
          items:
            $ref: '#/components/schemas/Voter'
        max_voters:
          type: integer
        last_billed:
          type: string
        rate_per_voter:
          type: string
        username:
          type: string
        password:
          type: string
        secret:
          type: string
        contact_name:
          type: string
        contact_email:
          type: string
        contact_phone:
          type: string
        server:
          $ref: '#/components/schemas/Server'
    Voter:
      title: Voter
      type: object
      description: Models a single voter belonging to a single Host.
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone:
          type: string
    Session:
      title: VotingSessionTemplate
      type: object
      description: Models the skeleton for creating a voting session.
      properties:
        id:
          type: string
        host:
          type: string
        topics:
          type: string
        voters:
          type: array
          items:
            $ref: '#/components/schemas/Voter'
    Topic:
      title: TopicTemplate
      type: object
      description: Models a template for creating a single Topic.
      properties:
        id:
          type: string
        text:
          type: string
        options:
          type: array
          items:
            type: string
    Vote:
      title: Vote
      type: object
      description: Models a single vote.
      properties:
        id:
          type: string
        voter:
          $ref: '#/components/schemas/Voter'
        value:
          type: string
    Server:
      title: VotingServer
      type: object
      description: Models a single Voting server.
      properties:
        id:
          type: string
        path:
          type: string
        busy:
          type: boolean
          default: 'false'
    Superuser:
      title: Superuser
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        username:
          type: string
        password:
          type: string
        secret:
          type: string
